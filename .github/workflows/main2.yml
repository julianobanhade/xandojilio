name: BESens2ss
on:
  workflow_dispatch:
    inputs:
      chunk:
        description: "Chunk number to run (all = run all chunks)"
        required: false
        default: "all"

jobs:
  send-b:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        chunk: ${{ fromJSON(github.event.inputs.chunk == 'all' && '[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]' || format('[{0}]', github.event.inputs.chunk)) }}
      max-parallel: 20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      # âœ… Rate-limit check step
      - name: Check GitHub API rate limit
        id: rate-limit
        run: |
          echo "Checking GitHub API rate limit..."
          REMAINING=$(gh api rate_limit --jq '.rate.remaining')
          RESET=$(gh api rate_limit --jq '.rate.reset')
          NOW=$(date +%s)
          echo "Remaining: $REMAINING"
          echo "Reset at: $(date -d @$RESET)"

          # If below 100, sleep until reset + 30 sec
          if [ "$REMAINING" -lt 100 ]; then
            SLEEP_FOR=$((RESET - NOW + 30))
            if [ "$SLEEP_FOR" -gt 0 ]; then
              echo "Low remaining calls ($REMAINING). Sleeping for $SLEEP_FOR seconds..."
              sleep $SLEEP_FOR
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Split recipients
        run: |
          mkdir -p chunks
          split -n l/256 --numeric-suffixes=0 --suffix-length=3 ./receipients.txt chunks/part_
          mv chunks/part_$(printf "%03d" ${{ matrix.chunk }}) recipients.txt
          rm -rf chunks

      - name: Run test
        id: test-step
        run: |
          echo "Running test for chunk ${{ matrix.chunk }}"
          python emp_test.py \
            --recipients recipients.txt \
            --html ./emaill.html \
            --froms ./froms.txt \
            --subjects ./subjects.txt \
            --smtp-server outlook-com.olc.protection.outlook.com \
            --threads 2 \
            --test-only

      - name: Retry on new runner if test fails
        if: failure()
        run: |
          echo "Retrying chunk ${{ matrix.chunk }} on a new runner..."
          gh workflow run .github/workflows/main2.yml -f chunk=${{ matrix.chunk }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run send
        if: success()
        run: |
          echo "Running send for chunk ${{ matrix.chunk }}"
          python email_sender.py \
            --recipients recipients.txt \
            --html ./emaill.html \
            --froms ./froms.txt \
            --subjects ./subjects.txt \
            --smtp-server outlook-com.olc.protection.outlook.com \
            --threads 100
